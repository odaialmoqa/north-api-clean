package com.north.mobile.ui.dashboard

import androidx.compose.foundation.*
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material.icons.outlined.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.north.mobile.ui.components.NorthLogo
import androidx.compose.animation.*
import androidx.compose.animation.core.*
import androidx.compose.foundation.gestures.detectTapGestures
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.runtime.rememberCoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun WealthsimpleDashboard(
    onNavigateToChat: () -> Unit = {},
    onNavigateToInsights: () -> Unit = {},
    onLaunchPlaidLink: ((String, (String?) -> Unit) -> Unit)? = null
) {
    var selectedTab by remember { mutableStateOf(0) }
    var isAccountConnected by remember { mutableStateOf(false) }
    var userName by remember { mutableStateOf("User") }
    
    // Fetch user profile on component load
    LaunchedEffect(Unit) {
        delay(500)
        userName = "Odai" // This would come from the API
    }
    
    Scaffold(
        bottomBar = {
            NavigationBar(
                containerColor = Color.White,
                tonalElevation = 0.dp
            ) {
                val tabs = listOf(
                    Triple("Home", Icons.Outlined.Home, Icons.Filled.Home),
                    Triple("Insights", Icons.Outlined.TrendingUp, Icons.Filled.TrendingUp),
                    Triple("Goals", Icons.Outlined.Flag, Icons.Filled.Flag),
                    Triple("CFO", Icons.Outlined.Person, Icons.Filled.Person),
                    Triple("Settings", Icons.Outlined.Settings, Icons.Filled.Settings)
                )
                
                tabs.forEachIndexed { index, (title, outlinedIcon, filledIcon) ->
                    NavigationBarItem(
                        selected = selectedTab == index,
                        onClick = { 
                            selectedTab = index
                            when (index) {
                                1 -> onNavigateToInsights()
                                3 -> onNavigateToChat()
                            }
                        },
                        icon = {
                            Icon(
                                imageVector = if (selectedTab == index) filledIcon else outlinedIcon,
                                contentDescription = title,
                                tint = if (selectedTab == index) Color(0xFF00D4AA) else Color(0xFF6B7280)
                            )
                        },
                        label = { 
                            Text(
                                title,
                                color = if (selectedTab == index) Color(0xFF00D4AA) else Color(0xFF6B7280),
                                fontSize = 12.sp
                            ) 
                        },
                        colors = NavigationBarItemDefaults.colors(
                            indicatorColor = Color.Transparent
                        )
                    )
                }
            }
        }
    ) { paddingValues ->
        when (selectedTab) {
            0 -> HomeContent(paddingValues, onNavigateToChat, isAccountConnected, userName, onLaunchPlaidLink) { isAccountConnected = true }
            1 -> InsightsContent(paddingValues)
            2 -> GoalsContent(paddingValues)
            3 -> ChatContent(paddingValues, onNavigateToChat)
            4 -> SettingsContent(paddingValues)
        }
    }
}

@Composable
fun HomeContent(
    paddingValues: PaddingValues, 
    onNavigateToChat: () -> Unit,
    isAccountConnected: Boolean,
    userName: String,
    onLaunchPlaidLink: ((String, (String?) -> Unit) -> Unit)?,
    onAccountConnected: () -> Unit
) {
    LazyColumn(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFF8FAFC))
            .padding(paddingValues),
        contentPadding = PaddingValues(20.dp),
        verticalArrangement = Arrangement.spacedBy(20.dp)
    ) {
        item {
            Column(
                modifier = Modifier.padding(top = 20.dp),
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                Text(
                    "Good morning, $userName",
                    fontSize = 28.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFF1F2937)
                )
                Text(
                    "Here's your financial overview",
                    fontSize = 16.sp,
                    color = Color(0xFF6B7280)
                )
            }
        }
        
        if (!isAccountConnected) {
            item {
                BankConnectionCard(onLaunchPlaidLink, onAccountConnected)
            }
        }
        
        item {
            NetWorthCard()
        }
        
        item {
            MonthlySpendingCard()
        }
        
        item {
            AICFOCard(onNavigateToChat)
        }
        
        item {
            RecentActivityCard()
        }
    }
}

@Composable
fun BankConnectionCard(
    onLaunchPlaidLink: ((String, (String?) -> Unit) -> Unit)?,
    onAccountConnected: () -> Unit
) {
    var isConnecting by remember { mutableStateOf(false) }
    var connectionError by remember { mutableStateOf<String?>(null) }
    val coroutineScope = rememberCoroutineScope()
    
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(containerColor = Color(0xFF00D4AA)),
        shape = RoundedCornerShape(16.dp)
    ) {
        Column(
            modifier = Modifier.padding(20.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                Icon(
                    imageVector = Icons.Default.AccountBalance,
                    contentDescription = "Bank",
                    tint = Color.White,
                    modifier = Modifier.size(28.dp)
                )
                Column {
                    Text(
                        "Connect Your Bank",
                        fontSize = 18.sp,
                        fontWeight = FontWeight.Bold,
                        color = Color.White
                    )
                    Text(
                        "Get personalized insights",
                        fontSize = 14.sp,
                        color = Color.White.copy(alpha = 0.9f)
                    )
                }
            }
            
            Text(
                "Securely connect your Canadian bank accounts to unlock AI-powered financial advice and real-time spending insights.",
                fontSize = 14.sp,
                color = Color.White.copy(alpha = 0.9f),
                lineHeight = 20.sp
            )
            
            if (connectionError != null) {
                Text(
                    "Connection failed: $connectionError",
                    fontSize = 12.sp,
                    color = Color.White.copy(alpha = 0.9f),
                    modifier = Modifier
                        .background(Color.White.copy(alpha = 0.2f), RoundedCornerShape(8.dp))
                        .padding(8.dp)
                )
            }
            
            Button(
                onClick = { 
                    if (onLaunchPlaidLink != null) {
                        isConnecting = true
                        connectionError = null
                        
                        // First get link token from backend
                        coroutineScope.launch {
                            try {
                                // TODO: Replace with actual API call to get link token
                                val linkToken = "link-sandbox-12345" // This should come from your backend
                                
                                onLaunchPlaidLink(linkToken) { publicToken ->
                                    if (publicToken != null) {
                                        println("✅ Plaid connection successful: $publicToken")
                                        onAccountConnected()
                                    } else {
                                        println("❌ Plaid connection failed")
                                        connectionError = "Failed to connect to bank"
                                    }
                                    isConnecting = false
                                }
                            } catch (e: Exception) {
                                println("❌ Error getting link token: ${e.message}")
                                connectionError = "Failed to initialize connection"
                                isConnecting = false
                            }
                        }
                    } else {
                        // Fallback simulation if Plaid not available
                        isConnecting = true
                        connectionError = null
                        coroutineScope.launch {
                            delay(2000)
                            onAccountConnected()
                            isConnecting = false
                        }
                    }
                },
                enabled = !isConnecting,
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color.White,
                    contentColor = Color(0xFF00D4AA)
                ),
                shape = RoundedCornerShape(12.dp),
                modifier = Modifier.fillMaxWidth()
            ) {
                if (isConnecting) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.spacedBy(8.dp)
                    ) {
                        CircularProgressIndicator(
                            modifier = Modifier.size(16.dp),
                            color = Color(0xFF00D4AA),
                            strokeWidth = 2.dp
                        )
                        Text(
                            "Connecting...",
                            fontSize = 16.sp,
                            fontWeight = FontWeight.Medium
                        )
                    }
                } else {
                    Text(
                        "Connect Bank Account",
                        fontSize = 16.sp,
                        fontWeight = FontWeight.Medium
                    )
                }
            }
            
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                Icon(
                    imageVector = Icons.Default.Lock,
                    contentDescription = "Security",
                    tint = Color.White.copy(alpha = 0.8f),
                    modifier = Modifier.size(16.dp)
                )
                Text(
                    "Bank-level security • Read-only access • Canadian data protection",
                    fontSize = 12.sp,
                    color = Color.White.copy(alpha = 0.8f)
                )
            }
        }
    }
}

@Composable
fun NetWorthCard() {
    var animatedValue by remember { mutableStateOf(0) }
    val targetValue = 127450
    
    LaunchedEffect(Unit) {
        delay(400)
        val steps = 50
        val stepValue = targetValue / steps
        repeat(steps) { step ->
            delay(30)
            animatedValue = (stepValue * (step + 1)).coerceAtMost(targetValue)
        }
    }
    
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(containerColor = Color(0xFFF1F5F9)),
        shape = RoundedCornerShape(16.dp),
        elevation = CardDefaults.cardElevation(0.dp)
    ) {
        Column(
            modifier = Modifier
                .padding(24.dp)
                .fillMaxWidth(),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            Text(
                "NET WORTH",
                fontSize = 14.sp,
                fontWeight = FontWeight.Medium,
                color = Color(0xFF6B7280),
                letterSpacing = 1.sp,
                textAlign = TextAlign.Center
            )
            
            Text(
                "$${animatedValue.toString().replace(Regex("(\\d)(?=(\\d{3})+(?!\\d))"), "$1,")}",
                fontSize = 36.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF1F2937),
                textAlign = TextAlign.Center,
                modifier = Modifier.fillMaxWidth()
            )
            
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.Center,
                modifier = Modifier.fillMaxWidth()
            ) {
                Icon(
                    imageVector = Icons.Default.TrendingUp,
                    contentDescription = "Up",
                    tint = Color(0xFF10B981),
                    modifier = Modifier.size(16.dp)
                )
                Spacer(modifier = Modifier.width(4.dp))
                Text(
                    "+$4,280 this month",
                    fontSize = 14.sp,
                    color = Color(0xFF10B981),
                    fontWeight = FontWeight.Medium
                )
            }
        }
    }
}

@Composable
fun MonthlySpendingCard() {
    var progressAnimated by remember { mutableStateOf(0f) }
    val targetProgress = 0.68f
    
    LaunchedEffect(Unit) {
        delay(600)
        animate(
            initialValue = 0f,
            targetValue = targetProgress,
            animationSpec = tween(1200, easing = EaseOutCubic)
        ) { value, _ ->
            progressAnimated = value
        }
    }
    
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(containerColor = Color.White),
        shape = RoundedCornerShape(16.dp),
        elevation = CardDefaults.cardElevation(0.dp)
    ) {
        Column(
            modifier = Modifier.padding(20.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                Box(
                    modifier = Modifier
                        .size(32.dp)
                        .background(Color(0xFFFEF3C7), CircleShape),
                    contentAlignment = Alignment.Center
                ) {
                    Text("💳", fontSize = 16.sp)
                }
                Text(
                    "Monthly Spending",
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFF1F2937)
                )
            }
            
            Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    Text(
                        "December Budget",
                        fontSize = 14.sp,
                        color = Color(0xFF6B7280)
                    )
                    Text(
                        "$2,380 / $3,500",
                        fontSize = 14.sp,
                        fontWeight = FontWeight.Medium,
                        color = Color(0xFF1F2937)
                    )
                }
                
                LinearProgressIndicator(
                    progress = progressAnimated,
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(8.dp)
                        .clip(RoundedCornerShape(4.dp)),
                    color = Color(0xFFF59E0B),
                    trackColor = Color(0xFFF3F4F6)
                )
                
                Text(
                    "$1,120 remaining • On track for month-end",
                    fontSize = 12.sp,
                    color = Color(0xFF6B7280)
                )
            }
            
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {
                SpendingMetric("$847", "Avg weekly spend")
                SpendingMetric("-12%", "vs last month")
            }
        }
    }
}

@Composable
fun SpendingMetric(value: String, label: String) {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(4.dp)
    ) {
        Text(
            value,
            fontSize = 24.sp,
            fontWeight = FontWeight.Bold,
            color = Color(0xFF1F2937)
        )
        Text(
            label,
            fontSize = 12.sp,
            color = Color(0xFF6B7280),
            textAlign = TextAlign.Center
        )
    }
}

@Composable
fun AICFOCard(onNavigateToChat: () -> Unit) {
    var isPressed by remember { mutableStateOf(false) }
    
    val scale by animateFloatAsState(
        targetValue = if (isPressed) 0.98f else 1f,
        animationSpec = tween(150)
    )
    
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .graphicsLayer {
                scaleX = scale
                scaleY = scale
            }
            .pointerInput(Unit) {
                detectTapGestures(
                    onPress = {
                        isPressed = true
                        tryAwaitRelease()
                        isPressed = false
                    },
                    onTap = {
                        onNavigateToChat()
                    }
                )
            },
        colors = CardDefaults.cardColors(containerColor = Color.White),
        shape = RoundedCornerShape(16.dp),
        elevation = CardDefaults.cardElevation(2.dp)
    ) {
        Column(
            modifier = Modifier.padding(20.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                NorthLogo(size = 40.dp)
                Column {
                    Text(
                        "North, Your Personal CFO",
                        fontSize = 16.sp,
                        fontWeight = FontWeight.Bold,
                        color = Color(0xFF1F2937)
                    )
                    Text(
                        "Your personal financial advisor",
                        fontSize = 14.sp,
                        color = Color(0xFF6B7280)
                    )
                }
            }
            
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .background(Color(0xFFF8FAFC), RoundedCornerShape(12.dp))
                    .padding(16.dp)
            ) {
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(12.dp)
                ) {
                    Box(
                        modifier = Modifier
                            .width(4.dp)
                            .height(80.dp)
                            .background(Color(0xFF00D4AA), RoundedCornerShape(2.dp))
                    )
                    Text(
                        "\"Odai, I've noticed your dining expenses increased 18% this month. Based on your goals, I recommend setting a $400 dining budget to accelerate your Europe trip savings by 3 months.\"",
                        fontSize = 14.sp,
                        color = Color(0xFF374151),
                        lineHeight = 20.sp
                    )
                }
            }
        }
    }
}

@Composable
fun RecentActivityCard() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(containerColor = Color.White),
        shape = RoundedCornerShape(16.dp),
        elevation = CardDefaults.cardElevation(0.dp)
    ) {
        Column(
            modifier = Modifier.padding(20.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                Icon(
                    imageVector = Icons.Default.BarChart,
                    contentDescription = "Activity",
                    tint = Color(0xFF6B46C1),
                    modifier = Modifier.size(20.dp)
                )
                Text(
                    "Recent Activity",
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFF1F2937)
                )
            }
            
            Column(verticalArrangement = Arrangement.spacedBy(16.dp)) {
                TransactionItem("Salary Deposit", "Today, 9:00 AM", "+$4,200.00", true)
                TransactionItem("Whole Foods", "Yesterday, 6:30 PM", "-$127.43", false)
                TransactionItem("Investment Transfer", "Dec 8, 2:15 PM", "-$800.00", false)
                TransactionItem("Coffee Project", "Dec 8, 8:45 AM", "-$6.75", false)
            }
        }
    }
}

@Composable
fun TransactionItem(title: String, time: String, amount: String, isPositive: Boolean) {
    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Column(verticalArrangement = Arrangement.spacedBy(4.dp)) {
            Text(
                title,
                fontSize = 14.sp,
                fontWeight = FontWeight.Medium,
                color = Color(0xFF1F2937)
            )
            Text(
                time,
                fontSize = 12.sp,
                color = Color(0xFF6B7280)
            )
        }
        
        Text(
            amount,
            fontSize = 16.sp,
            fontWeight = FontWeight.Bold,
            color = if (isPositive) Color(0xFF10B981) else Color(0xFF1F2937)
        )
    }
}

@Composable
fun InsightsContent(paddingValues: PaddingValues) {
    LazyColumn(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFF8FAFC))
            .padding(paddingValues),
        contentPadding = PaddingValues(20.dp),
        verticalArrangement = Arrangement.spacedBy(20.dp)
    ) {
        item {
            Column(
                modifier = Modifier.padding(top = 20.dp),
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                Text(
                    "Financial Insights",
                    fontSize = 28.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFF1F2937)
                )
                Text(
                    "Understand your spending patterns",
                    fontSize = 16.sp,
                    color = Color(0xFF6B7280)
                )
            }
        }
        
        item {
            SpendingCategoriesCard()
        }
        
        item {
            MonthlyTrendsCard()
        }
    }
}

@Composable
fun GoalsContent(paddingValues: PaddingValues) {
    LazyColumn(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFF8FAFC))
            .padding(paddingValues),
        contentPadding = PaddingValues(20.dp),
        verticalArrangement = Arrangement.spacedBy(20.dp)
    ) {
        item {
            Column(
                modifier = Modifier.padding(top = 20.dp),
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                Text(
                    "Financial Goals",
                    fontSize = 28.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFF1F2937)
                )
                Text(
                    "Track your progress",
                    fontSize = 16.sp,
                    color = Color(0xFF6B7280)
                )
            }
        }
        
        item {
            GoalsCard()
        }
    }
}

@Composable
fun GoalsCard() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(containerColor = Color.White),
        shape = RoundedCornerShape(16.dp),
        elevation = CardDefaults.cardElevation(0.dp)
    ) {
        Column(
            modifier = Modifier.padding(20.dp),
            verticalArrangement = Arrangement.spacedBy(20.dp)
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                Box(
                    modifier = Modifier
                        .size(32.dp)
                        .background(Color(0xFFFEE2E2), CircleShape),
                    contentAlignment = Alignment.Center
                ) {
                    Text("🎯", fontSize = 16.sp)
                }
                Text(
                    "Your Goals",
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFF1F2937)
                )
            }
            
            GoalItem("Emergency Fund", "$8,500", "$10,000", 0.85f, Color(0xFF10B981))
            GoalItem("Europe Trip", "$2,100", "$5,000", 0.42f, Color(0xFF6B46C1))
        }
    }
}

@Composable
fun GoalItem(title: String, current: String, target: String, progress: Float, color: Color) {
    Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Text(
                title,
                fontSize = 14.sp,
                fontWeight = FontWeight.Medium,
                color = Color(0xFF1F2937)
            )
            Text(
                "$current / $target",
                fontSize = 14.sp,
                color = Color(0xFF6B7280)
            )
        }
        
        LinearProgressIndicator(
            progress = progress,
            modifier = Modifier
                .fillMaxWidth()
                .height(8.dp)
                .clip(RoundedCornerShape(4.dp)),
            color = color,
            trackColor = Color(0xFFF3F4F6)
        )
        
        Text(
            "Almost there! Keep up the great work",
            fontSize = 12.sp,
            color = Color(0xFF6B7280)
        )
    }
}

@Composable
fun ChatContent(paddingValues: PaddingValues, onNavigateToChat: () -> Unit) {
    LaunchedEffect(Unit) {
        onNavigateToChat()
    }
    
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFF8FAFC))
            .padding(paddingValues),
        contentAlignment = Alignment.Center
    ) {
        CircularProgressIndicator(color = Color(0xFF00D4AA))
    }
}

@Composable
fun SettingsContent(paddingValues: PaddingValues) {
    LazyColumn(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFF8FAFC))
            .padding(paddingValues),
        contentPadding = PaddingValues(20.dp),
        verticalArrangement = Arrangement.spacedBy(20.dp)
    ) {
        item {
            Column(
                modifier = Modifier.padding(top = 20.dp),
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                Text(
                    "Settings",
                    fontSize = 28.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFF1F2937)
                )
                Text(
                    "Manage your account and preferences",
                    fontSize = 16.sp,
                    color = Color(0xFF6B7280)
                )
            }
        }
        
        item {
            SettingsBankConnectionCard()
        }
        
        item {
            SettingsSection(
                title = "Account",
                items = listOf(
                    SettingsItem("Connected Accounts", Icons.Default.AccountBalance, "Manage your linked bank accounts"),
                    SettingsItem("Privacy Settings", Icons.Default.Lock, "Control your data and privacy"),
                    SettingsItem("Data Management", Icons.Default.Storage, "Export or delete your data")
                )
            )
        }
        
        item {
            SettingsSection(
                title = "App",
                items = listOf(
                    SettingsItem("Notifications", Icons.Default.Notifications, "Manage alerts and reminders"),
                    SettingsItem("Help & Support", Icons.Default.Help, "Get help or contact support"),
                    SettingsItem("About", Icons.Default.Info, "App version and legal info")
                )
            )
        }
        
        item {
            Card(
                modifier = Modifier.fillMaxWidth(),
                colors = CardDefaults.cardColors(containerColor = Color.White),
                shape = RoundedCornerShape(16.dp)
            ) {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .clickable { }
                        .padding(20.dp),
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.spacedBy(16.dp)
                ) {
                    Icon(
                        imageVector = Icons.Default.ExitToApp,
                        contentDescription = "Logout",
                        tint = Color(0xFFEF4444),
                        modifier = Modifier.size(24.dp)
                    )
                    Column(modifier = Modifier.weight(1f)) {
                        Text(
                            "Sign Out",
                            fontSize = 16.sp,
                            fontWeight = FontWeight.Medium,
                            color = Color(0xFFEF4444)
                        )
                        Text(
                            "Sign out of your North account",
                            fontSize = 14.sp,
                            color = Color(0xFF6B7280)
                        )
                    }
                }
            }
        }
    }
}

@Composable
fun SettingsBankConnectionCard() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(containerColor = Color.White),
        shape = RoundedCornerShape(16.dp)
    ) {
        Column(
            modifier = Modifier.padding(20.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                Icon(
                    imageVector = Icons.Default.AccountBalance,
                    contentDescription = "Bank",
                    tint = Color(0xFF00D4AA),
                    modifier = Modifier.size(24.dp)
                )
                Text(
                    "Bank Accounts",
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFF1F2937)
                )
            }
            
            Text(
                "0 accounts connected",
                fontSize = 14.sp,
                color = Color(0xFF6B7280)
            )
            
            Text(
                "Connect your bank accounts to get personalized insights and AI-powered financial advice.",
                fontSize = 14.sp,
                color = Color(0xFF6B7280),
                lineHeight = 20.sp
            )
            
            Button(
                onClick = { },
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color(0xFF00D4AA),
                    contentColor = Color.White
                ),
                shape = RoundedCornerShape(12.dp),
                modifier = Modifier.fillMaxWidth()
            ) {
                Text(
                    "Connect Bank Account",
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Medium
                )
            }
        }
    }
}

@Composable
fun SettingsSection(title: String, items: List<SettingsItem>) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(containerColor = Color.White),
        shape = RoundedCornerShape(16.dp)
    ) {
        Column(
            modifier = Modifier.padding(20.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            Text(
                title,
                fontSize = 18.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF1F2937)
            )
            
            items.forEach { item ->
                SettingsItemRow(item)
            }
        }
    }
}

@Composable
fun SettingsItemRow(item: SettingsItem) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .clickable { }
            .padding(vertical = 8.dp),
        verticalAlignment = Alignment.CenterVertically,
        horizontalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        Icon(
            imageVector = item.icon,
            contentDescription = item.title,
            tint = Color(0xFF6B7280),
            modifier = Modifier.size(24.dp)
        )
        Column(modifier = Modifier.weight(1f)) {
            Text(
                item.title,
                fontSize = 16.sp,
                fontWeight = FontWeight.Medium,
                color = Color(0xFF1F2937)
            )
            Text(
                item.description,
                fontSize = 14.sp,
                color = Color(0xFF6B7280)
            )
        }
    }
}

@Composable
fun SpendingCategoriesCard() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(containerColor = Color.White),
        shape = RoundedCornerShape(16.dp)
    ) {
        Column(
            modifier = Modifier.padding(20.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            Text(
                "Spending by Category",
                fontSize = 18.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF1F2937)
            )
            
            SpendingCategoryItem("Dining & Restaurants", "$847", 35, Color(0xFFEF4444))
            SpendingCategoryItem("Groceries", "$623", 26, Color(0xFF10B981))
            SpendingCategoryItem("Transportation", "$412", 17, Color(0xFF3B82F6))
            SpendingCategoryItem("Entertainment", "$298", 12, Color(0xFF8B5CF6))
            SpendingCategoryItem("Other", "$240", 10, Color(0xFF6B7280))
        }
    }
}

@Composable
fun SpendingCategoryItem(category: String, amount: String, percentage: Int, color: Color) {
    Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Text(
                category,
                fontSize = 14.sp,
                fontWeight = FontWeight.Medium,
                color = Color(0xFF1F2937)
            )
            Text(
                "$amount ($percentage%)",
                fontSize = 14.sp,
                color = Color(0xFF6B7280)
            )
        }
        
        LinearProgressIndicator(
            progress = percentage / 100f,
            modifier = Modifier
                .fillMaxWidth()
                .height(6.dp)
                .clip(RoundedCornerShape(3.dp)),
            color = color,
            trackColor = Color(0xFFF3F4F6)
        )
    }
}

@Composable
fun MonthlyTrendsCard() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(containerColor = Color.White),
        shape = RoundedCornerShape(16.dp)
    ) {
        Column(
            modifier = Modifier.padding(20.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            Text(
                "Monthly Trends",
                fontSize = 18.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF1F2937)
            )
            
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {
                TrendMetric("Income", "+$4,200", true)
                TrendMetric("Expenses", "-$2,380", false)
                TrendMetric("Savings", "+$1,820", true)
            }
        }
    }
}

@Composable
fun TrendMetric(label: String, value: String, isPositive: Boolean) {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(4.dp)
    ) {
        Text(
            value,
            fontSize = 20.sp,
            fontWeight = FontWeight.Bold,
            color = if (isPositive) Color(0xFF10B981) else Color(0xFF1F2937)
        )
        Text(
            label,
            fontSize = 12.sp,
            color = Color(0xFF6B7280)
        )
    }
}

data class SettingsItem(
    val title: String,
    val icon: ImageVector,
    val description: String
)