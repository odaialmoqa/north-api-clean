package com.north.mobile.ui.accounts

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.north.mobile.data.plaid.SimplePlaidAccount
import com.north.mobile.data.plaid.PlaidConnectionStatus
import kotlinx.coroutines.launch

@Composable
fun AccountsScreen(
    viewModel: AccountsViewModel,
    onConnectAccount: () -> Unit,
    onViewAccountDetails: (String) -> Unit,
    onManagePrivacy: (String) -> Unit,
    onRefresh: () -> Unit
) {
    val accounts = viewModel.accounts
    val isLoading = viewModel.isLoading
    val errorMessage = viewModel.errorMessage
    val connectionHealth = viewModel.connectionHealth
    val syncingAccountIds = viewModel.syncingAccountIds
    
    var showErrorDialog by remember { mutableStateOf(false) }
    
    // Show error dialog when there's an error
    LaunchedEffect(errorMessage) {
        if (errorMessage != null) {
            showErrorDialog = true
        }
    }
    
    LazyColumn(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        // Enhanced connection overview with health status
        item {
            EnhancedAccountConnectionOverview(
                totalAccounts = accounts.size,
                healthyConnections = viewModel.getHealthyAccountsCount(),
                needsAttention = viewModel.getAccountsNeedingAttention().size,
                connectionHealth = connectionHealth,
                totalBalance = viewModel.getTotalBalance(),
                lastSyncTime = viewModel.lastSyncTime,
                onSyncAll = { viewModel.syncAllAccounts() }
            )
        }
        
        // Plaid connection card (if no accounts or user wants to add more)
        if (accounts.isEmpty()) {
            item {
                PlaidConnectionCard(
                    onConnectAccount = onConnectAccount,
                    isLoading = isLoading
                )
            }
        }
        
        // Connected accounts with enhanced features
        items(accounts) { account ->
            ConnectedAccountCard(
                account = account,
                onReconnect = { viewModel.reconnectAccount(account.id) },
                onDisconnect = { viewModel.disconnectAccount(account.id) },
                onViewDetails = { onViewAccountDetails(account.id) },
                onSyncTransactions = { viewModel.syncTransactions(account.id) },
                isLoading = viewModel.isAccountSyncing(account.id)
            )
        }
        
        // Add more accounts card (if user already has accounts)
        if (accounts.isNotEmpty()) {
            item {
                AddMoreAccountsCard(
                    onAddAccount = onConnectAccount,
                    isLoading = isLoading
                )
            }
        }
        
        // Privacy and data management section
        if (accounts.isNotEmpty()) {
            item {
                PrivacyManagementCard(
                    onManagePrivacy = { onManagePrivacy("all") }
                )
            }
        }
        
        // Help section
        item {
            AccountsHelpSection()
        }
    }
    
    // Error dialog
    if (showErrorDialog && errorMessage != null) {
        AlertDialog(
            onDismissRequest = { 
                showErrorDialog = false
                viewModel.clearError()
            },
            title = { Text("Account Error") },
            text = { Text(errorMessage) },
            confirmButton = {
                TextButton(
                    onClick = { 
                        showErrorDialog = false
                        viewModel.clearError()
                    }
                ) {
                    Text("OK")
                }
            }
        )
    }
}

@Composable
fun AccountConnectionOverview(
    totalAccounts: Int,
    healthyConnections: Int,
    needsAttention: Int
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.primaryContainer)
    ) {
        Column(
            modifier = Modifier.padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            Text(
                "Account Connections",
                fontSize = 18.sp,
                fontWeight = FontWeight.Bold,
                color = MaterialTheme.colorScheme.onPrimaryContainer
            )
            
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                ConnectionStat(
                    label = "Total Accounts",
                    value = totalAccounts.toString(),
                    color = MaterialTheme.colorScheme.onPrimaryContainer
                )
                
                ConnectionStat(
                    label = "Healthy",
                    value = healthyConnections.toString(),
                    color = Color(0xFF10B981)
                )
                
                if (needsAttention > 0) {
                    ConnectionStat(
                        label = "Needs Attention",
                        value = needsAttention.toString(),
                        color = Color(0xFFEF4444)
                    )
                }
            }
        }
    }
}

@Composable
fun ConnectionStat(
    label: String,
    value: String,
    color: Color
) {
    Column(horizontalAlignment = Alignment.CenterHorizontally) {
        Text(
            value,
            fontSize = 24.sp,
            fontWeight = FontWeight.Bold,
            color = color
        )
        Text(
            label,
            fontSize = 12.sp,
            color = color.copy(alpha = 0.8f)
        )
    }
}

@Composable
fun AddMoreAccountsCard(
    onAddAccount: () -> Unit,
    isLoading: Boolean
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            Icon(
                imageVector = Icons.Default.Add,
                contentDescription = "Add Account",
                tint = MaterialTheme.colorScheme.primary,
                modifier = Modifier.size(24.dp)
            )
            
            Column(modifier = Modifier.weight(1f)) {
                Text(
                    "Connect Another Account",
                    fontWeight = FontWeight.Medium,
                    fontSize = 16.sp
                )
                Text(
                    "Get a complete picture of your finances",
                    fontSize = 14.sp,
                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)
                )
            }
            
            OutlinedButton(
                onClick = onAddAccount,
                enabled = !isLoading
            ) {
                if (isLoading) {
                    CircularProgressIndicator(
                        modifier = Modifier.size(16.dp),
                        strokeWidth = 2.dp
                    )
                } else {
                    Text("Connect")
                }
            }
        }
    }
}

@Composable
fun AccountsHelpSection() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)
    ) {
        Column(
            modifier = Modifier.padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            Text(
                "🔒 Your Data is Secure",
                fontWeight = FontWeight.Medium,
                fontSize = 14.sp
            )
            
            Text(
                "• Bank-level 256-bit encryption\n• Read-only access to your accounts\n• We never store your banking credentials\n• Powered by Plaid, trusted by millions",
                fontSize = 12.sp,
                color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.8f),
                lineHeight = 16.sp
            )
        }
    }
}
@Composabl
e
fun EnhancedAccountConnectionOverview(
    totalAccounts: Int,
    healthyConnections: Int,
    needsAttention: Int,
    connectionHealth: ConnectionHealth,
    totalBalance: Double,
    lastSyncTime: Long?,
    onSyncAll: () -> Unit
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = when (connectionHealth) {
                ConnectionHealth.Excellent -> Color(0xFF10B981).copy(alpha = 0.1f)
                ConnectionHealth.Good -> Color(0xFF6366F1).copy(alpha = 0.1f)
                ConnectionHealth.Warning -> Color(0xFFF59E0B).copy(alpha = 0.1f)
                ConnectionHealth.Critical -> Color(0xFFEF4444).copy(alpha = 0.1f)
                ConnectionHealth.Unknown -> MaterialTheme.colorScheme.surfaceVariant
            }
        )
    ) {
        Column(
            modifier = Modifier.padding(20.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // Header with health status
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Column {
                    Text(
                        "Account Overview",
                        fontSize = 20.sp,
                        fontWeight = FontWeight.Bold
                    )
                    Text(
                        getHealthStatusText(connectionHealth),
                        fontSize = 14.sp,
                        color = getHealthStatusColor(connectionHealth),
                        fontWeight = FontWeight.Medium
                    )
                }
                
                if (totalAccounts > 0) {
                    OutlinedButton(
                        onClick = onSyncAll,
                        modifier = Modifier.size(40.dp),
                        contentPadding = PaddingValues(0.dp)
                    ) {
                        Icon(
                            Icons.Default.Sync,
                            contentDescription = "Sync All",
                            modifier = Modifier.size(16.dp)
                        )
                    }
                }
            }
            
            // Stats row
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                EnhancedConnectionStat(
                    label = "Total Balance",
                    value = formatCurrency(totalBalance),
                    color = Color(0xFF10B981),
                    icon = "💰"
                )
                
                EnhancedConnectionStat(
                    label = "Accounts",
                    value = "$healthyConnections/$totalAccounts",
                    color = if (healthyConnections == totalAccounts) Color(0xFF10B981) else Color(0xFFF59E0B),
                    icon = "🏦"
                )
                
                if (lastSyncTime != null) {
                    EnhancedConnectionStat(
                        label = "Last Sync",
                        value = formatLastSync(lastSyncTime),
                        color = MaterialTheme.colorScheme.onSurface,
                        icon = "🔄"
                    )
                }
            }
            
            // Health indicator
            if (needsAttention > 0) {
                Card(
                    colors = CardDefaults.cardColors(
                        containerColor = Color(0xFFF59E0B).copy(alpha = 0.1f)
                    )
                ) {
                    Row(
                        modifier = Modifier.padding(12.dp),
                        horizontalArrangement = Arrangement.spacedBy(8.dp),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text("⚠️", fontSize = 16.sp)
                        Text(
                            "$needsAttention account${if (needsAttention > 1) "s" else ""} need${if (needsAttention == 1) "s" else ""} attention",
                            fontSize = 14.sp,
                            color = Color(0xFFF59E0B),
                            fontWeight = FontWeight.Medium
                        )
                    }
                }
            }
        }
    }
}

@Composable
private fun EnhancedConnectionStat(
    label: String,
    value: String,
    color: Color,
    icon: String
) {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(4.dp)
    ) {
        Text(
            icon,
            fontSize = 20.sp
        )
        Text(
            value,
            fontSize = 16.sp,
            fontWeight = FontWeight.Bold,
            color = color
        )
        Text(
            label,
            fontSize = 12.sp,
            color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)
        )
    }
}

@Composable
fun PrivacyManagementCard(onManagePrivacy: () -> Unit) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(containerColor = Color(0xFF6366F1).copy(alpha = 0.1f))
    ) {
        Row(
            modifier = Modifier.padding(16.dp),
            horizontalArrangement = Arrangement.spacedBy(12.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Surface(
                color = Color(0xFF6366F1).copy(alpha = 0.2f),
                shape = androidx.compose.foundation.shape.RoundedCornerShape(8.dp),
                modifier = Modifier.size(40.dp)
            ) {
                Box(contentAlignment = Alignment.Center) {
                    Icon(
                        Icons.Default.Security,
                        contentDescription = null,
                        tint = Color(0xFF6366F1),
                        modifier = Modifier.size(20.dp)
                    )
                }
            }
            
            Column(modifier = Modifier.weight(1f)) {
                Text(
                    "Privacy & Data Controls",
                    fontWeight = FontWeight.Bold,
                    fontSize = 16.sp
                )
                Text(
                    "Manage how your data is used and shared",
                    fontSize = 14.sp,
                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)
                )
            }
            
            OutlinedButton(onClick = onManagePrivacy) {
                Text("Manage")
            }
        }
    }
}

private fun getHealthStatusText(health: ConnectionHealth): String {
    return when (health) {
        ConnectionHealth.Excellent -> "All systems go! ✅"
        ConnectionHealth.Good -> "Looking good 👍"
        ConnectionHealth.Warning -> "Some issues detected ⚠️"
        ConnectionHealth.Critical -> "Needs attention ❌"
        ConnectionHealth.Unknown -> "Checking status..."
    }
}

private fun getHealthStatusColor(health: ConnectionHealth): Color {
    return when (health) {
        ConnectionHealth.Excellent -> Color(0xFF10B981)
        ConnectionHealth.Good -> Color(0xFF6366F1)
        ConnectionHealth.Warning -> Color(0xFFF59E0B)
        ConnectionHealth.Critical -> Color(0xFFEF4444)
        ConnectionHealth.Unknown -> Color(0xFF6B7280)
    }
}

private fun formatCurrency(amount: Double): String {
    return if (amount >= 1000) {
        "$${String.format("%.1f", amount / 1000)}k"
    } else {
        "$${String.format("%.0f", amount)}"
    }
}

private fun formatLastSync(timestamp: Long): String {
    val now = System.currentTimeMillis()
    val diff = now - timestamp
    
    return when {
        diff < 60_000 -> "Now"
        diff < 3600_000 -> "${diff / 60_000}m"
        diff < 86400_000 -> "${diff / 3600_000}h"
        else -> "${diff / 86400_000}d"
    }
}